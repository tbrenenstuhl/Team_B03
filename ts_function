############
#pandas for data manipulation
import pandas as pd
#numpy for numerical manipulation
import numpy as np
#to plot
import matplotlib.pylab as plt
#for adjusted dickey fuller test
from statsmodels.tsa.stattools import adfuller


#set parameters
%matplotlib inline
plt.rcParams['figure.figsize'] = 15, 6


#lamda function to define date format
dateparse = lambda dates: pd.datetime.strptime(dates, '%m/%d/%Y')
# tab delimited; specify the time column
data = pd.read_csv('C:\\Users\\sukanyabhat\\Desktop\\GODADDY\\Data\\student_data_20160215\\student_data_20160215.txt', sep="\t",parse_dates='orderdate', index_col='orderdate',date_parser=dateparse)

#Let's take one subset of data and plot its TS
#Need to modify this code to group on all the combinations and pull time series
# something like pandas group by 
data_subset=data[(data.report_region_1=='APAC') & (data.report_region_2=='APAC-Tier3') & (data.product_category_id==6)]
#since TS needs sorted data
data_subset.sortlevel(['orderdate'],inplace=True)

#print (data.head())

#time series of gcr
ts_gcr = data['gcr'] 
#time series of orders
ts_orders = data['orders'] 
plt.plot(ts_gcr)
plt.plot(ts_orders)
#taking span of 30 since it is daily data
rolmean = pd.rolling_mean(ts_gcr, window=30)
rolstd = pd.rolling_std(ts_gcr, window=30)

#Plot rolling statistics:
orig = plt.plot(ts_gcr, color='blue',label='Original')
mean = plt.plot(rolmean, color='red', label='Rolling Mean')
std = plt.plot(rolstd, color='black', label = 'Rolling Std')
plt.legend(loc='best')
plt.title('Rolling Mean & Standard Deviation')
plt.show(block=False)
    
#Perform Dickey-Fuller test:
print ('Results of Dickey-Fuller Test:')
dftest = adfuller(ts_gcr, autolag='AIC')
dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
for key,value in dftest[4].items():
    dfoutput['Critical Value (%s)'%key] = value
print (dfoutput)
